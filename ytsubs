#! /usr/bin/env python3

# ytsubs 0.3.4

# Distributed under the terms of the GNU General Public License, version 3

# Requires Python 3, version 3.2 or later 3.x.

# TODO
# - parallelisation

import sys
import signal
import itertools
import time
import json
import argparse
import http
import html
import urllib, urllib.request
from xml.sax import saxutils

PROGRAM = 'ytsubs'
VERSION = '0.3.4'

PAGE_LIMIT = 50
YT_BASE_URL = 'https://www.youtube.com'
YT_DATE_FORMATS = (
    '%Y-%m-%dT%H:%M:%S.000Z',
    '%Y-%m-%dT%H:%M:%SZ',
)
THUMB_QUALITY = 'medium'
FEED_DATE_FORMAT = '%a, %d %b %Y %H:%M:%S %Z'
FEED_START_TEMPLATE = '''<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>YouTube subscriptions</title>
        <link>https://www.youtube.com/my_subscriptions</link>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <lastBuildDate>{0}</lastBuildDate>'''
FEED_ITEM_TEMPLATE = '''
        <item>
            <title>{title}</title>
            <link>{link}</link>
            <description>{description}</description>
            <pubDate>{published}</pubDate>
            <published>{published}</published>
            <guid>{link}</guid>
        </item>'''
FEED_END_TEMPLATE = '''
    </channel>
</rss>'''

UNEXPECTED_ERROR = 1
INPUT_ERROR = 2
INTERRUPT_ERROR = 3
SUBN_FORBIDDEN_MSG = ('access to the given channel\'s subscriptions is '
'restricted - either make your subscriptions public, or specify the channels '
'to query directly')


# util

def prnt (*args):
    """Print to stderr."""
    print(*args, file=sys.stderr)

def merge (*dicts):
    """Merge the given dicts without modifying them.

Later arguments take precedence.

"""
    result = {}
    for d in dicts:
        result.update(d)
    return result


def batch_iter (i, batch_size):
    """Split an iterator into parts.

i: iterator
batch_size: maximum number of items per part

Returns an iterator over sequences of items.

"""
    batch = []
    for x in i:
        batch.append(x)
        if len(batch) >= batch_size:
            yield batch
            batch = []
    if batch:
        yield batch


# rss

def mk_video_url (video_id):
    """Return the URL to a video on YouTube given its ID."""
    return '{}/watch?{}'.format(YT_BASE_URL,
                                urllib.parse.urlencode({'v': video_id}))


def feed_start ():
    """Return the prefix to the RSS feed."""
    return FEED_START_TEMPLATE.format(
        time.strftime(FEED_DATE_FORMAT, time.gmtime()))


def feed_video (video):
    """Return an item for the RSS feed for a single video.

video: as returned by get_channels_uploads

"""
    desc = video['description']
    if desc:
        desc = '<p>' + '</p>\n<p>'.join(desc.splitlines()) + '</p>'
    desc = '<img src="{}" width="{}" height="{}">\n'.format(*map(html.escape, (
        video['thumb url'], str(video['thumb w']), str(video['thumb h'])
    ))) + desc

    feed_item = {
        'title': '{}: \'{}\''.format(video['channel'], saxutils.unescape(video['title'])),
        'link': mk_video_url(video['id']),
        'description': desc,
        'published': time.strftime(FEED_DATE_FORMAT, video['published']),
    }

    return FEED_ITEM_TEMPLATE.format(**{
        k: saxutils.escape(v) for k, v in feed_item.items()
    })


def feed_end ():
    """Return the suffix to the RSS feed."""
    return FEED_END_TEMPLATE


# youtube

class BadResponse (Exception):
    """Error indicating the YouTube API responded with incorrect data, or the
request failed without receiving a response."""

    def __init__ (self, *args):
        Exception.__init__(self, 'API request failed unexpectedly:', *args)


class RequestError (Exception):
    """Error indicating the YouTube API responded with an error."""

    def __init__ (self, res):
        self.res = res
        Exception.__init__(self, 'API request returned an error:', res)


class InvalidChannel (Exception):
    """Raised when using an invalid channel ID or username."""

    def __init__ (self, channel):
        self.channel = channel
        Exception.__init__(self, 'unknown channel ID or username:', channel)


def walk (item, path, *msg):
    """Try to index an object, raising `BadResponse` on failure.

item: indexable object to look up attributes in
path: sequence keys/indices to follow - subsequent items are used to index the
      object returned by the previous indexing operation
msg: arguments to pass to `BadResponse` before the raised error

"""
    result = item
    for key in path:
        try:
            result = result[key]
        except (TypeError, KeyError, IndexError) as e:
            raise BadResponse(*(msg + (e,)))
    return result


def walk_item (item_type, item, path):
    """`walk` with auto-generated message for items returned for `list`
operations by the YouTube API.

item_type: string giving the type of `item`, used in the error message
item, path: as taken by `walk`

"""
    return walk(item, path, '{} item:'.format(item_type), item)


def test_error (error, expect_code):
    """Check if a YouTube API error has a particular error code.

error: `RequestError`
expect_code: specific string error code expected ('reason' in 'errors' array)

"""
    details = error.res['error']
    try:
        code = walk(error.res, ['error', 'errors', 0, 'reason'])
    except BadResponse:
        return False
    else:
        return code == expect_code


def parse_yt_date (date):
    for fmt in YT_DATE_FORMATS:
        try:
            return time.strptime(date, fmt)
        except ValueError as e:
            pass
    # nothing matched
    raise ValueError(
        '{} doesn\'t match any known format: {}'.format(
            repr(date), ', '.join(map(repr, YT_DATE_FORMATS))))


class YouTubeClient:
    """Client for making requests to the YouTube v3 API.

apikey: used for simple authentication; if not given, requests are made
        unauthenticated
base_url: prefix to the API's URL, without trailing '/'

"""
    # request methods raise BadResponse, RequestError

    def __init__ (self, apikey=None,
                  base_url='https://www.googleapis.com/youtube/v3'):
        self.apikey = apikey
        self.base_url = base_url

    def url (self, path, params):
        """Get the URL for an API resource.

path: resource path, without leading '/'
params: dict of API parameters, without API key

"""
        if self.apikey is not None:
            params = merge({'key': self.apikey}, params)
        return '{}/{}?{}'.format(self.base_url, path,
                                 urllib.parse.urlencode(params))

    def req (self, path, params={}):
        """Make a 'list' API request.

path: resource path, without leading '/'
params: dict of API parameters, without API key

Raises `BadResponse` and `RequestError`

"""
        try:
            http_res = urllib.request.urlopen(self.url(path, params))
        except urllib.error.HTTPError as e:
            http_res = e
        except urllib.error.URLError as e:
            raise BadResponse(e)

        try:
            res = json.loads(http_res.read().decode())
        except (
            http.client.HTTPException, ValueError, UnicodeDecodeError
        ) as e:
            raise BadResponse(e)

        if not isinstance(res, dict):
            raise BadResponse('expected object', res)
        elif 'error' in res:
            raise RequestError(res)
        else:
            return res

    def req_paginate (self, path, params):
        """Make a 'list' API request and return an iterator over items.

Arguments are as taken by `req`.

"""
        base_params = merge({'maxResults': PAGE_LIMIT}, params)
        page_token = None

        while True:
            paging_params = ({} if page_token is None
                             else {'pageToken': page_token})
            res = self.req(path, merge(base_params, paging_params))
            try:
                for item in res['items']:
                    yield item
            except KeyError:
                # items can be missing when empty
                pass
            except TypeError:
                raise BadResponse(res)

            page_token = res.get('nextPageToken')
            if page_token is None:
                break


def get_username_channel (yt, username, parts):
    """Get a resource description for the channel associated with a username.

yt: YouTubeClient
username: YouTube username
parts: 'part' parameter to YouTube 'list' API requests

Raises `InvalidChannel`.

"""
    channel_items = yt.req_paginate('channels', {
        'part': 'snippet,contentDetails',
        'forUsername': username,
    })
    try:
        return next(channel_items)
    except StopIteration:
        raise InvalidChannel(username)


def get_username_channel_id (yt, username):
    """Get the ID for the channel associated with a username.

yt: YouTubeClient
username: YouTube username

Raises `InvalidChannel`

"""
    return walk_item('channel', get_username_channel(yt, username, 'id'),
                     ['id'])


def get_channel_subns (yt, channel_id):
    """Get IDs for channels subscribed to by the given channel.

yt: YouTubeClient
channel_id: subscriber's channel ID or username

Returns an iterator over channel IDs.

"""
    try:
        # must have the for/yield here - if we just return an iterator, we
        # can't catch the exception
        for sub_item in yt.req_paginate('subscriptions', {
            'part': 'snippet',
            'channelId': channel_id,
        }):
            yield walk_item('subscription', sub_item,
                            ['snippet', 'resourceId', 'channelId'])
    except RequestError as e:
        if test_error(e, 'subscriberNotFound'):
            # maybe channel_id is a username
            for sub_item in yt.req_paginate('subscriptions', {
                'part': 'snippet',
                'channelId': get_username_channel_id(yt, channel_id)
            }):
                yield walk_item('subscription', sub_item,
                                ['snippet', 'resourceId', 'channelId'])
        else:
            raise e


def get_channels_upload_playlist_ids (yt, channel_ids):
    """Get IDs for playlists containing the uploads for the given channels.

yt: YouTubeClient
channel_ids: sequence of channel IDs or usernames

Returns an iterator over playlist descriptors - dicts with keys 'channel id',
'channel title', 'id'.

"""
    channel_items = list(yt.req_paginate('channels', {
        'part': 'id,snippet,contentDetails',
        'id': ','.join(channel_ids),
    }))

    # missing ids in the response weren't found - maybe they're usernames
    got_channel_ids = (
        walk_item('channel', channel_item, ['id'])
        for channel_item in channel_items
    )
    missing_channel_ids = set(channel_ids) - set(got_channel_ids)
    channel_items.extend(
        get_username_channel(yt, channel_id, 'snippet,contentDetails')
        for channel_id in missing_channel_ids
    )

    for channel_item in channel_items:
        yield {
            k: walk_item('channel', channel_item, path)
            for k, path in {
                'channel id': ['id'],
                'channel title': ['snippet', 'title'],
                'id': ['contentDetails', 'relatedPlaylists', 'uploads'],
            }.items()
        }


def get_channels_uploads (yt, channel_ids, include_video):
    """Get videos uploaded by the given channels.

yt: YouTubeClient
channel_ids: sequence of channel IDs or usernames
include_video: function taking a video descriptor as returned and returning
               whether it should be included in the result; if not, no further
               videos are returned either

Returns an iterator over video descriptors - dicts with keys 'channel',
'published' (`time.struct_time`), 'title', 'description', 'id', 'thumb url',
'thumb w' and 'thumb h'.

"""
    thumb_path = ['snippet', 'thumbnails', THUMB_QUALITY]

    for playlist_item in (
        get_channels_upload_playlist_ids(yt, channel_ids)
    ):
        for video_item in yt.req_paginate('search', {
            'channelId': playlist_item['channel id'],
            'playlistId': playlist_item['id'],
            'type': 'video',
            'part': 'snippet',
            'order': 'date',
            'safeSearch': 'none',
        }):
            video = {
                k: walk_item('video', video_item, path)
                for k, path in {
                    'published': ['snippet', 'publishedAt'],
                    'title': ['snippet', 'title'],
                    'description': ['snippet', 'description'],
                    'id': ['id', 'videoId'],
                    'thumb url': thumb_path + ['url'],
                    'thumb w': thumb_path + ['width'],
                    'thumb h': thumb_path + ['height'],
                }.items()
            }

            video['channel'] = playlist_item['channel title']
            try:
                video['published'] = parse_yt_date(video['published'])
            except ValueError as e:
                raise BadResponse('video publish date', e)

            if not include_video(video):
                break
            yield video


# assumes videos are retrieved in date order, most recent first
def get_videos (yt, subs_channel_id, max_age):
    """Get videos according to the script's input.

Returns an iterator over video descriptors, as returned by
`get_channels_uploads`.

"""
    num_channels = 0
    num_videos = 0
    start_time = time.gmtime(time.time() - 60 * 60 * 24 * max_age)
    include_video = lambda video: video['published'] >= start_time

    try:
        if subs_channel_id is None:
            channel_ids = (line.rstrip() for line in sys.stdin)
        else:
            channel_ids = get_channel_subns(yt, subs_channel_id)

        # must iterate directly here or we can't catch exceptions
        for channel_ids_batch in batch_iter(channel_ids, PAGE_LIMIT):
            num_channels += len(channel_ids_batch)
            for video in get_channels_uploads(yt, channel_ids_batch,
                                              include_video):
                num_videos += 1
                yield video

    except RequestError as e:
        if test_error(e, 'subscriptionForbidden'):
            prnt(SUBN_FORBIDDEN_MSG)
            sys.exit(INPUT_ERROR)
        else:
            prnt(*e.args)
            sys.exit(UNEXPECTED_ERROR)
    except (BadResponse, InvalidChannel) as e:
        prnt(*e.args)
        sys.exit(UNEXPECTED_ERROR)

    prnt('retrieved {} video(s) from {} channel(s)'.format(
        num_videos, num_channels))


if __name__ == '__main__':
    quit = lambda *args: sys.exit(INTERRUPT_ERROR)
    signal.signal(signal.SIGINT, quit)
    signal.signal(signal.SIGTERM, quit)

    p = argparse.ArgumentParser(
        prog=PROGRAM,
        description='''Fetch YouTube videos from subscriptions and print them
to standard output as an RSS feed.

When specifying channels, using an ID will result in better performance than
using a username.''')
    p.add_argument(
        '-v', '--version', action='version',
        version='%(prog)s {}'.format(VERSION))
    p.add_argument(
        '-c', '--for-channel', action='store', type=str, dest='subs_channel',
        metavar='CHANNEL',
        help='channel ID (see https://www.youtube.com/account_advanced) or '
            'username to fetch subscriptions for; if not given, channel IDs '
            'or usernames are read from standard input, one per line, and '
            'the output consists of from the uploads of these channels')
    p.add_argument(
        '-k', '--apikey', action='store', type=str,
        help='Google APIs API key - see https://console.developers.google.com '
            '- without one, usage is heavily limited')
    p.add_argument(
        '-s', '--start', action='store', type=int, default=14, dest='max_age',
        metavar='DAYS',
        help='how many days ago to start the feed at (default: %(default)s)')
    args = p.parse_args()

    yt = YouTubeClient(args.apikey)
    out_file = sys.stdout.buffer
    out_file.write(feed_start().encode('utf-8'))
    for video in get_videos(yt, args.subs_channel, args.max_age):
        out_file.write(feed_video(video).encode('utf-8'))
    out_file.write(feed_end().encode('utf-8'))
