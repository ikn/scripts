#! /usr/bin/env python2

# Distributed under the terms of the GNU General Public License, version 3

# Usage:
# "aos <cmd> [<args...>]" - runs AoS via "<cmd> [<args...>] -<server_uri>"

import sys
from subprocess import Popen
from threading import Thread
from Queue import Queue

import gtk
from htmlparse import tree_from_url, HTMLTree

def get ():
    # fetch server list
    tree = tree_from_url('http://ace-spades.com/?page_id=5')
    lines = tree.selection('#content pre')[0].source().split('\n')[1:-1]
    servers = []
    for line in lines:
        tree = HTMLTree(line)
        a = tree._a
        data = tree.textnode.text.strip()
        i = data.rfind(' ')
        fields = [data[:i].replace(' ', ''), data[i:].strip()]
        servers.append([a.textnode.text, a.attrs['href']] + fields)
    return servers, len(fields)

def show (servers, num_fields):
    # populate window
    global w
    c = w.get_children()
    if c:
        w.remove(c[0])
    s = gtk.ScrolledWindow()
    s.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)
    s.set_shadow_type(gtk.SHADOW_NONE)
    w.add(s)
    h = gtk.HBox(False, 10)
    h.set_border_width(5)
    s.add_with_viewport(h)
    s.child.set_shadow_type(gtk.SHADOW_NONE)
    bs = gtk.VBox(True, 5)
    h.pack_start(bs, False)
    fs = []
    for i in xrange(num_fields):
        f = gtk.VBox(True, 5)
        h.pack_start(f, False)
        fs.append(f)
    for server in servers:
        name, url = server[:2]
        data = server[2:]
        b = gtk.Button(name)
        b.connect('clicked', run, url)
        bs.pack_start(b)
        for i, text in enumerate(data):
            l = gtk.Label(text)
            fs[i].pack_start(l)
    w.resize(1, 500)
    w.show_all()

def run_get (q):
    # run get in a thread
    q.put(get())

def populate ():
    # fill window with servers
    global w
    q = Queue()
    t = Thread(target = run_get, args = (q,))
    t.daemon = True
    t.start()
    while q.empty():
        gtk.main_iteration(False)
    t.join()
    show(*q.get())
    w.connect('delete_event', gtk.main_quit)

def run (b, server):
    # run AoS
    cmd = [sys.argv[1]] + sys.argv[2:] + ['-' + server]
    try:
        if len(sys.argv) > 1:
            Popen(cmd)
        else:
            raise ValueError('expected a command')
    except (OSError, ValueError), e:
        global w
        if isinstance(e, OSError):
            msg = 'Couldn\'t run AoS (\'{0}\').'.format(' '.join(cmd))
        else:
            msg = 'Can\'t run AoS without an argument (command to run).'
        d = gtk.MessageDialog(w, gtk.DIALOG_MODAL, gtk.MESSAGE_ERROR,
                              gtk.BUTTONS_OK, msg)
        d.run()
        d.destroy()
    else:
        gtk.main_quit()

# create window
w = gtk.Window()
w.connect('delete_event', lambda *args: sys.exit())
w.set_border_width(5)
l = gtk.Label('fetching server list...')
w.add(l)
w.show_all()
populate()

gtk.main()
